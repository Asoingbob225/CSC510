"""Tests validating the structure of the LLM recommendation response."""

from collections.abc import Iterator

import pytest
from sqlalchemy.orm import Session

from src.eatsential.models.models import MenuItem, Restaurant, UserDB
from src.eatsential.utils.auth_util import create_access_token


def _auth_headers(user: UserDB) -> dict[str, str]:
    token = create_access_token(data={"sub": user.id})
    return {"Authorization": f"Bearer {token}"}


@pytest.fixture
def structure_user(db: Session) -> Iterator[UserDB]:
    """Create a user for response structure validation."""
    user = UserDB(
        id="rec_structure_user",
        email="structure@example.com",
        username="rec_structure",
        password_hash="hashed",
        email_verified=True,
    )
    db.add(user)
    db.commit()
    db.refresh(user)
    yield user


@pytest.fixture
def structure_menu_item(db: Session) -> Iterator[MenuItem]:
    """Persist a single menu item used for deterministic assertions."""
    restaurant = Restaurant(
        id="rec_structure_restaurant",
        name="Structure Cafe",
        cuisine=None,
        is_active=True,
    )
    db.add(restaurant)
    db.flush()

    menu_item = MenuItem(
        id="rec_structure_item",
        restaurant_id=restaurant.id,
        name="Structure Bowl",
        description=None,
        calories=320.0,
        price=9.75,
    )
    db.add(menu_item)
    db.commit()
    db.refresh(menu_item)
    yield menu_item


def test_recommendation_response_shape(
    client, structure_user: UserDB, structure_menu_item: MenuItem
) -> None:
    """Verify the response payload shape generated by the LLM engine."""
    response = client.post(
        "/api/recommend/meal",
        headers=_auth_headers(structure_user),
        json={},
    )

    assert response.status_code == 200
    payload = response.json()
    assert set(payload) == {"items"}
    assert payload["items"], "Expected at least one recommended item"

    first_item = payload["items"][0]
    assert {"item_id", "name", "score", "explanation"} <= set(first_item)
    assert first_item["item_id"] == structure_menu_item.id
    assert first_item["name"] == structure_menu_item.name
    assert isinstance(first_item["score"], float)
    assert isinstance(first_item["explanation"], str)
    assert first_item["explanation"], "Explanation should not be empty"
