app:
  description: ""
  icon: üìë
  icon_background: "#EFF1F5"
  mode: advanced-chat
  name: 1b1 Retreival Chatbot
  use_icon_as_answer_icon: false
dependencies:
  - current_identifier: null
    type: marketplace
    value:
      marketplace_plugin_unique_identifier: langgenius/gemini:0.5.4@22fa3d100c55f8fc4b2837d8fb0831e3c8de333a5a5b028e073d502d2df9cb35
  - current_identifier: null
    type: marketplace
    value:
      marketplace_plugin_unique_identifier: langgenius/ollama:0.0.7@8fc496b3892344da47db6125c76fc0dbfd8020753f198032751d83f561d9443e
  - current_identifier: null
    type: marketplace
    value:
      marketplace_plugin_unique_identifier: langgenius/openai:0.2.5@373362a028986aae53a7baf73a7f11991ba3c22c69eaf97d6cde048cfd4a9f98
kind: app
version: 0.4.0
workflow:
  conversation_variables: []
  environment_variables: []
  features:
    file_upload:
      allowed_file_extensions:
        - .JPG
        - .JPEG
        - .PNG
        - .GIF
        - .WEBP
        - .SVG
      allowed_file_types:
        - image
      allowed_file_upload_methods:
        - local_file
        - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
          - local_file
          - remote_url
      number_limits: 3
    opening_statement: ""
    retriever_resource:
      enabled: false
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ""
      voice: ""
  graph:
    edges:
      - data:
          isInLoop: false
          sourceType: start
          targetType: knowledge-retrieval
        id: 1711528914102-source-1757262345191-target
        source: "1711528914102"
        sourceHandle: source
        target: "1757262345191"
        targetHandle: target
        type: custom
        zIndex: 0
      - data:
          isInLoop: false
          sourceType: knowledge-retrieval
          targetType: llm
        id: 1757262345191-source-1757259618395-target
        source: "1757262345191"
        sourceHandle: source
        target: "1757259618395"
        targetHandle: target
        type: custom
        zIndex: 0
      - data:
          isInIteration: false
          isInLoop: false
          sourceType: llm
          targetType: answer
        id: 1757268788110--1757268995247-target
        source: "1757268788110"
        sourceHandle: source
        target: "1757268995247"
        targetHandle: target
        type: custom
        zIndex: 0
      - data:
          isInLoop: false
          sourceType: knowledge-retrieval
          targetType: llm
        id: 1757262345191-source-1757268788110-target
        source: "1757262345191"
        sourceHandle: source
        target: "1757268788110"
        targetHandle: target
        type: custom
        zIndex: 0
      - data:
          isInLoop: false
          sourceType: llm
          targetType: answer
        id: 1757259618395-source-1757268995247-target
        source: "1757259618395"
        sourceHandle: source
        target: "1757268995247"
        targetHandle: target
        type: custom
        zIndex: 0
    nodes:
      - data:
          desc: ""
          selected: false
          title: Start
          type: start
          variables: []
        height: 53
        id: "1711528914102"
        position:
          x: -125.74714264397329
          y: 2634.5
        positionAbsolute:
          x: -125.74714264397329
          y: 2634.5
        selected: false
        sourcePosition: right
        targetPosition: left
        type: custom
        width: 243
      - data:
          dataset_ids:
            - /6JEPfVVdegKkV1xjPSrCEOTWiBgSRxJ+3SUPjHyyOSdxpt19i63NcGur/XYcc65
          desc: ""
          multiple_retrieval_config:
            reranking_enable: true
            reranking_mode: weighted_score
            top_k: 4
            weights:
              keyword_setting:
                keyword_weight: 0
              vector_setting:
                embedding_model_name: nomic-embed-text
                embedding_provider_name: langgenius/ollama/ollama
                vector_weight: 1
          query_variable_selector:
            - "1711528914102"
            - sys.query
          retrieval_mode: multiple
          selected: false
          title: Knowledge Base
          type: knowledge-retrieval
        height: 91
        id: "1757262345191"
        position:
          x: 247.9288996176332
          y: 2634.5
        positionAbsolute:
          x: 247.9288996176332
          y: 2634.5
        selected: false
        sourcePosition: right
        targetPosition: left
        type: custom
        width: 243
      - data:
          context:
            enabled: true
            variable_selector:
              - "1757262345191"
              - result
          desc: ""
          memory:
            query_prompt_template: "{{#sys.query#}}"
            role_prefix:
              assistant: ""
              user: ""
            window:
              enabled: false
              size: 50
          model:
            completion_params:
              temperature: 0.7
            mode: chat
            name: gemini-2.5-flash
            provider: langgenius/gemini/google
          prompt_template:
            - id: bae4f511-c659-412c-a9ca-bd0e7fec1611
              role: system
              text:
                "1. CORE TASK\nYou are acting as a professional Systems Analyst: Based\
                \ on the context related to tax regulations and health I provide in <RAG_CONTEXT>,\
                \ expand my existing list of use cases <EXISTING_USE_CASES>.\n2. CRITICAL\
                \ INSTRUCTION: USE CASE STRUCTURE AND EXAMPLES\nThis is the most important\
                \ rule: All new use cases you generate MUST learn from and strictly follow\
                \ the template and example format below (but you can format as markdown).\n\
                --- USE CASE TEMPLATE START ---\nUse Case Title: (A short, descriptive\
                \ name)\nSummary: (Briefly describe the overall goal and flow of this\
                \ use case in 1-2 sentences)\nPreconditions:\nCondition 1.\n...\nMain\
                \ Flow: (Describe the process of successfully completing the goal in one\
                \ paragraph. Within the flow, reference the Subflows and Alternative Flows\
                \ defined below using [square brackets].)\nSubflows:\n[Subflow Name]:\
                \ Description.\n[Another Subflow Name]: Description.\nAlternative Flows:\n\
                [Alternative Flow Name]: Description.\n[Another Alternative Flow Name]:\
                \ Description.\n--- USE CASE TEMPLATE END ---\n--- LEARNING EXAMPLES (FEW-SHOT)\
                \ ---\nExample 1: UC1 Customer Places an Order\nSummary: This use case\
                \ describes how a Customer browses the WolfCafe menu, builds a cart, and\
                \ completes the checkout process, resulting in a confirmed order that\
                \ is passed to Staff for fulfillment.\nPreconditions:\nThe Customer is\
                \ authenticated in the WolfCafe system.\nAt least one item has already\
                \ been added to the shopping cart.\nMain Flow: The Customer proceeds to\
                \ checkout. On the summary screen, they may [Edit Cart], [Apply Coupon],\
                \ add a tip, and select payment before submitting. The system validates\
                \ the order: failed transactions trigger [Payment Declined], unavailable\
                \ items trigger [Item Out of Stock]. Successful orders generate a confirmation\
                \ and unique number. Inactivity causes [Session Timeout], clearing the\
                \ cart.\nSubflows:\n[Edit Cart]: Add, remove, or update items. If unavailable,\
                \ triggers [Item Out of Stock].\n[Apply Coupon]: Enter promo code; valid\
                \ codes apply discount, invalid ones show inline error for retry.\nAlternative\
                \ Flows:\n[Payment Declined]: Payment rejected; system notifies and returns\
                \ to payment selection.\n[Item Out of Stock]: Removes unavailable items,\
                \ updates totals, and prompts confirmation.\n[Session Timeout]: Inactivity\
                \ logs out user, clears cart, and requires re-login.\nExample 2: UC2 Fulfill\
                \ Customer Order\nSummary: This use case describes how Staff process and\
                \ complete a customer order once it has been placed.\nPreconditions:\n\
                The staff member is logged into the WolfCafe system with Staff privileges.\n\
                At least one order exists in ‚ÄúPending‚Äù status.\nThe required ingredients\
                \ and equipment are available in the caf√©.\nMain Flow: A staff member\
                \ [Claims Order] from the queue. They [View Order Details], prepare items,\
                \ and the system [Adjusts Inventory]. If ingredients are low, a [Low Stock\
                \ Alert] is issued. Staff may [Contact Customer] if issues arise; unresolved\
                \ cases lead to [Order Cancellation]. When done, the order is marked \"\
                Ready for Pickup\".\nSubflows:\n[View Order Details]: Shows items, modifiers,\
                \ and notes.\n[Claim Order]: Locks order to staff; prevents duplicates.\n\
                [Adjust Inventory]: Deducts ingredients; triggers [Low Stock Alert] if\
                \ insufficient.\nAlternative Flows:\n[Low Stock Alert]: Flags shortages;\
                \ may allow substitution.\n[Contact Customer]: If instructions can‚Äôt be\
                \ fulfilled; unresolved ‚Üí [Order Cancellation].\n[Order Cancellation]:\
                \ Logs reason, updates status, notifies customer.\n---------------------------------\n\
                3. WORKFLOW\nI will provide the specific content for <System Background>,\
                \ <RAG_CONTEXT> and <EXISTING_USE_CASES> at the end of this prompt, enclosed\
                \ in XML tags.\nPlease parse the entire prompt, including the XML content\
                \ at the end, before starting the task.\n<RAG_CONTEXT>{{#context#}}</RAG_CONTEXT>\n\
                \n<EXISTING_USE_CASES>\nUC1 Customer Places an Order UC2 Fulfill Customer\
                \ Order UC3 Add Menu Item UC4 Manage Customer Profile UC5 View Order History\
                \ UC6 Staff Manages Inventory UC7 Generate Sales Report UC8 Notify Customer\
                \ of Order UC9 Provide Customer Feedback UC10 Deploy System Update UC11\
                \ Process Tax Compliance Report\nUC12 Conduct Health Inspection Compliance\
                \ Check\nUC13 Track Food Temperature Monitoring\nUC14 Calculate Multi-State\
                \ Sales Tax\nUC15 Manage Allergen Information Compliance\nUC16 Process\
                \ Nutritional Benefit Program Integration\nUC17 Maintain Food Safety Training\
                \ Records</EXISTING_USE_CASES>\n\n<System Background> \nNow that you are\
                \ familiar with our technology stack, you will work with a team to implement\
                \ the WolfCafe system! WolfCafe is similar to GrubHub. A customer can\
                \ order items, they are put together by a staff member, and the customer\
                \ is notified when items are ready. You will reuse some code from CoffeeMaker\
                \ in WolfCafe.\nYour team‚Äôs direct manager is your lab TA, but any of\
                \ the TAs may serve as manager. Your instructors are Chief Technology\
                \ Officers and product owners of the WolfCafe system. The goal is to deliver\
                \ several new features, explore non-functional requirements, and new constraints.\n\
                Problem Statement\nThe CoffeeMaker system provides general functionality\
                \ for creating ingredients, maintaining inventory, creating recipes, and\
                \ ordering recipes. But the system is currently lacking user roles. Additionally,\
                \ There is no functionality for making and fulfilling orders.\nThe WolfCafe\
                \ project has been created to set up user roles (admin, staff, and customer).\
                \ You can port in your CoffeeMaker functionality around ingredients, inventory,\
                \ recipes, and ordering recipes as a starting point for the WolfCafe project.\
                \ The WolfCafe also comes with the idea of an ‚ÄúItem‚Äù should want to move\
                \ away from the idea of ‚ÄúRecipes‚Äù or have items that represent individual\
                \ products (e.g., a bottle of water as distinct from a Latte).\nDetails\
                \ of what you‚Äôre expected to complete for the Team Project are listed\
                \ in the Problem Statement.\nThere are several required elements worth\
                \ 150 points and several optional elements worth extra credit.\nBase WolfCafe\n\
                Your team has been provided with the base WolfCafe project in your GitHub\
                \ repository. You‚Äôll want to review CoffeeMaker projects from team members\
                \ to see what you might want to use in WolfCafe.\nFeature-based Roles\n\
                Feature-based roles provide a mechanism for splitting up the work to implement\
                \ your requirements. Your team will support two feature-based sub teams\
                \ of 2-3 people each. Each feature-based sub-team will implement at least\
                \ one feature each iteration.\nEach use case or user story can typically\
                \ be broken into several main features. These may include backend business\
                \ logic, backend API, frontend data entry, frontend display, and frontend\
                \ reporting. Each team member must own one or more of the features. These\
                \ roles can change and shift as necessary over the course of the project.\n\
                In keeping with good git practices, remember that each unit of work (which\
                \ could be a feature) needs to be in its own topic branch, for example,\
                \ unityID/uc27-frontend-data-entry.\nIdentify the topic branches you foresee\
                \ and which team member will own each branch. Document the branches and\
                \ their owners in the wiki.\nNote: feature-based roles provide a way to\
                \ break up the workload between teammates; however, good communication\
                \ is required to ensure that each feature comes together into a cohesive\
                \ working whole.\nProject Outline/Milestones\nYour goal is to use good\
                \ software engineering practices to create a high quality product. As\
                \ part of the project, you will plan your tasks; write requirements; create\
                \ a design for the new parts of the system; create system and acceptance\
                \ tests for the new functionality; implement and write automated tests\
                \ to demonstrate high quality; perform inspections on requirements, design,\
                \ implementation, and tests; explore non-functional requirements and constraints;\
                \ and present a live demo of your system all while following good process,\
                \ working collaboratively with your team, and maintaining existing system\
                \ functionality.\nDetails about each project milestone are listed below\
                \ is forthcoming.\n</System Background>\n"
          selected: false
          title: LLM 1
          type: llm
          variables: []
          vision:
            enabled: false
        height: 89
        id: "1757259618395"
        position:
          x: 615.5337284204511
          y: 2634.5
        positionAbsolute:
          x: 615.5337284204511
          y: 2634.5
        selected: false
        sourcePosition: right
        targetPosition: left
        type: custom
        width: 243
      - data:
          context:
            enabled: true
            variable_selector:
              - "1757262345191"
              - result
          desc: ""
          memory:
            query_prompt_template: "{{#sys.query#}}"
            role_prefix:
              assistant: ""
              user: ""
            window:
              enabled: false
              size: 50
          model:
            completion_params: {}
            mode: chat
            name: gpt-5-mini
            provider: langgenius/openai/openai
          prompt_template:
            - id: d4d7af23-0955-4048-aec2-0385549fdede
              role: system
              text:
                "1. CORE TASK\nYou are acting as a professional Systems Analyst: Based\
                \ on the context related to tax regulations and health I provide in <RAG_CONTEXT>,\
                \ expand my existing list of use cases, <EXISTING_USE_CASES>.\n2. CRITICAL\
                \ INSTRUCTION: USE CASE STRUCTURE AND EXAMPLES\nThis is the most important\
                \ rule: All new use cases you generate MUST learn from and strictly follow\
                \ the template and example format below (but you can format as markdown).\n\
                --- USE CASE TEMPLATE START ---\nUse Case Title: (A short, descriptive\
                \ name)\nSummary: (Briefly describe the overall goal and flow of this\
                \ use case in 1-2 sentences)\nPreconditions:\nCondition 1.\n...\nMain\
                \ Flow: (Describe the process of successfully completing the goal in one\
                \ paragraph. Within the flow, reference the Subflows and Alternative Flows\
                \ defined below using [square brackets].)\nSubflows:\n[Subflow Name]:\
                \ Description.\n[Another Subflow Name]: Description.\nAlternative Flows:\n\
                [Alternative Flow Name]: Description.\n[Another Alternative Flow Name]:\
                \ Description.\n--- USE CASE TEMPLATE END ---\n--- LEARNING EXAMPLES (FEW-SHOT)\
                \ ---\nExample 1: UC1 Customer Places an Order\nSummary: This use case\
                \ describes how a Customer browses the WolfCafe menu, builds a cart, and\
                \ completes the checkout process, resulting in a confirmed order that\
                \ is passed to Staff for fulfillment.\nPreconditions:\nThe Customer is\
                \ authenticated in the WolfCafe system.\nAt least one item has already\
                \ been added to the shopping cart.\nMain Flow: The Customer proceeds to\
                \ checkout. On the summary screen, they may [Edit Cart], [Apply Coupon],\
                \ add a tip, and select payment before submitting. The system validates\
                \ the order: failed transactions trigger [Payment Declined], unavailable\
                \ items trigger [Item Out of Stock]. Successful orders generate a confirmation\
                \ and unique number. Inactivity causes [Session Timeout], clearing the\
                \ cart.\nSubflows:\n[Edit Cart]: Add, remove, or update items. If unavailable,\
                \ triggers [Item Out of Stock].\n[Apply Coupon]: Enter promo code; valid\
                \ codes apply discount, invalid ones show inline error for retry.\nAlternative\
                \ Flows:\n[Payment Declined]: Payment rejected; system notifies and returns\
                \ to payment selection.\n[Item Out of Stock]: Removes unavailable items,\
                \ updates totals, and prompts confirmation.\n[Session Timeout]: Inactivity\
                \ logs out user, clears cart, and requires re-login.\nExample 2: UC2 Fulfill\
                \ Customer Order\nSummary: This use case describes how Staff process and\
                \ complete a customer order once it has been placed.\nPreconditions:\n\
                The staff member is logged into the WolfCafe system with Staff privileges.\n\
                At least one order exists in ‚ÄúPending‚Äù status.\nThe required ingredients\
                \ and equipment are available in the caf√©.\nMain Flow: A staff member\
                \ [Claims Order] from the queue. They [View Order Details], prepare items,\
                \ and the system [Adjusts Inventory]. If ingredients are low, a [Low Stock\
                \ Alert] is issued. Staff may [Contact Customer] if issues arise; unresolved\
                \ cases lead to [Order Cancellation]. When done, the order is marked \"\
                Ready for Pickup\".\nSubflows:\n[View Order Details]: Shows items, modifiers,\
                \ and notes.\n[Claim Order]: Locks order to staff; prevents duplicates.\n\
                [Adjust Inventory]: Deducts ingredients; triggers [Low Stock Alert] if\
                \ insufficient.\nAlternative Flows:\n[Low Stock Alert]: Flags shortages;\
                \ may allow substitution.\n[Contact Customer]: If instructions can‚Äôt be\
                \ fulfilled; unresolved ‚Üí [Order Cancellation].\n[Order Cancellation]:\
                \ Logs reason, updates status, notifies customer.\n---------------------------------\n\
                3. WORKFLOW\nI will provide the specific content for <System Background>,\
                \ <RAG_CONTEXT> and <EXISTING_USE_CASES> at the end of this prompt, enclosed\
                \ in XML tags.\nPlease parse the entire prompt, including the XML content\
                \ at the end, before starting the task.\n<RAG_CONTEXT>{{#context#}}</RAG_CONTEXT>\n\
                \n<EXISTING_USE_CASES>\nUC1 Customer Places an Order UC2 Fulfill Customer\
                \ Order UC3 Add Menu Item UC4 Manage Customer Profile UC5 View Order History\
                \ UC6 Staff Manages Inventory UC7 Generate Sales Report UC8 Notify Customer\
                \ of Order UC9 Provide Customer Feedback UC10 Deploy System Update UC11\
                \ Process Tax Compliance Report\nUC12 Conduct Health Inspection Compliance\
                \ Check\nUC13 Track Food Temperature Monitoring\nUC14 Calculate Multi-State\
                \ Sales Tax\nUC15 Manage Allergen Information Compliance\nUC16 Process\
                \ Nutritional Benefit Program Integration\nUC17 Maintain Food Safety Training\
                \ Records</EXISTING_USE_CASES>\n\n<System Background> \nNow that you are\
                \ familiar with our technology stack, you will work with a team to implement\
                \ the WolfCafe system! WolfCafe is similar to GrubHub. A customer can\
                \ order items, they are put together by a staff member, and the customer\
                \ is notified when items are ready. You will reuse some code from CoffeeMaker\
                \ in WolfCafe.\nYour team‚Äôs direct manager is your lab TA, but any of\
                \ the TAs may serve as manager. Your instructors are Chief Technology\
                \ Officers and product owners of the WolfCafe system. The goal is to deliver\
                \ several new features, explore non-functional requirements, and new constraints.\n\
                Problem Statement\nThe CoffeeMaker system provides general functionality\
                \ for creating ingredients, maintaining inventory, creating recipes, and\
                \ ordering recipes. But the system is currently lacking user roles. Additionally,\
                \ There is no functionality for making and fulfilling orders.\nThe WolfCafe\
                \ project has been created to set up user roles (admin, staff, and customer).\
                \ You can port in your CoffeeMaker functionality around ingredients, inventory,\
                \ recipes, and ordering recipes as a starting point for the WolfCafe project.\
                \ The WolfCafe also comes with the idea of an ‚ÄúItem‚Äù should want to move\
                \ away from the idea of ‚ÄúRecipes‚Äù or have items that represent individual\
                \ products (e.g., a bottle of water as distinct from a Latte).\nDetails\
                \ of what you‚Äôre expected to complete for the Team Project are listed\
                \ in the Problem Statement.\nThere are several required elements worth\
                \ 150 points and several optional elements worth extra credit.\nBase WolfCafe\n\
                Your team has been provided with the base WolfCafe project in your GitHub\
                \ repository. You‚Äôll want to review CoffeeMaker projects from team members\
                \ to see what you might want to use in WolfCafe.\nFeature-based Roles\n\
                Feature-based roles provide a mechanism for splitting up the work to implement\
                \ your requirements. Your team will support two feature-based sub teams\
                \ of 2-3 people each. Each feature-based sub-team will implement at least\
                \ one feature each iteration.\nEach use case or user story can typically\
                \ be broken into several main features. These may include backend business\
                \ logic, backend API, frontend data entry, frontend display, and frontend\
                \ reporting. Each team member must own one or more of the features. These\
                \ roles can change and shift as necessary over the course of the project.\n\
                In keeping with good git practices, remember that each unit of work (which\
                \ could be a feature) needs to be in its own topic branch, for example,\
                \ unityID/uc27-frontend-data-entry.\nIdentify the topic branches you foresee\
                \ and which team member will own each branch. Document the branches and\
                \ their owners in the wiki.\nNote: feature-based roles provide a way to\
                \ break up the workload between teammates; however, good communication\
                \ is required to ensure that each feature comes together into a cohesive\
                \ working whole.\nProject Outline/Milestones\nYour goal is to use good\
                \ software engineering practices to create a high quality product. As\
                \ part of the project, you will plan your tasks; write requirements; create\
                \ a design for the new parts of the system; create system and acceptance\
                \ tests for the new functionality; implement and write automated tests\
                \ to demonstrate high quality; perform inspections on requirements, design,\
                \ implementation, and tests; explore non-functional requirements and constraints;\
                \ and present a live demo of your system all while following good process,\
                \ working collaboratively with your team, and maintaining existing system\
                \ functionality.\nDetails about each project milestone are listed below\
                \ is forthcoming.\n</System Background>"
          selected: false
          title: LLM 3
          type: llm
          variables: []
          vision:
            enabled: false
        height: 89
        id: "1757268788110"
        position:
          x: 663.3180481958541
          y: 2936.5481874937645
        positionAbsolute:
          x: 663.3180481958541
          y: 2936.5481874937645
        selected: false
        sourcePosition: right
        targetPosition: left
        type: custom
        width: 243
      - data:
          answer: "-----This is the response from GPT5-----


            {{#1757268788110.text#}}


            ----This is the response from Gemini-----


            {{#1757259618395.text#}}"
          desc: ""
          selected: false
          title: Áõ¥Êé•ÂõûÂ§ç 2
          type: answer
          variables: []
        height: 156
        id: "1757268995247"
        position:
          x: 1073.4406328600987
          y: 2936.5481874937645
        positionAbsolute:
          x: 1073.4406328600987
          y: 2936.5481874937645
        selected: false
        sourcePosition: right
        targetPosition: left
        type: custom
        width: 243
    viewport:
      x: 213.40686180616413
      y: -2140.37331591556
      zoom: 0.8705505632961243
